-- PocketBase View Collection for Deal-Level Revenue and Financing Analytics

-- =================================================================================
-- 1. Real Revenue
-- Logic: We calculate the "real revenue" for each deal. This is done by
-- summing up all positive transactions (deposits/revenue) and subtracting the
-- sum of all transactions specifically marked as 'financing' or 'transfer'.
-- Transactions with a blank type and positive amount are considered revenue.
-- =================================================================================
SELECT
    t.deal as id,
    t.deal,
    (t.total_revenue - t.total_financing_transfers) as realRevenue
FROM (
    SELECT
        deal,
        SUM(CASE WHEN amount > 0 AND (type = 'revenue' OR type = '') THEN amount ELSE 0 END) as total_revenue,
        SUM(CASE WHEN type = 'financing' OR type = 'transfer' THEN ABS(amount) ELSE 0 END) as total_financing_transfers
    FROM
        transactions
    GROUP BY
        deal
) t;

-- =================================================================================
-- 2. Funding as Percentage of Revenue (Debug View)
-- Logic: This query breaks down the calculation for "Funding as Percentage of Revenue"
-- to help debug why the result might be zero. It shows the intermediate values
-- for total financing and total revenue for each deal.
-- =================================================================================
SELECT
    t.deal as id,
    t.deal,
    t.total_financing,
    t.total_revenue,
    COALESCE(
        (t.total_financing * 100.0 / NULLIF(t.total_revenue, 0)),
        0
    ) as fundingAsPercentageOfRevenue
FROM (
    SELECT
        deal,
        SUM(CASE WHEN type = 'financing' THEN ABS(amount) ELSE 0 END) as total_financing,
        SUM(CASE WHEN amount > 0 AND (type = 'revenue' OR type = '') THEN amount ELSE 0 END) as total_revenue
    FROM
        transactions
    GROUP BY
        deal
) t;


-- =================================================================================
-- 3. Average Revenue (Time Series)
-- Logic: These views calculate the average revenue over different time periods
-- to show trends. We first calculate the total revenue for each day, then
-- average those daily totals over weeks and months.
-- =================================================================================

-- 3a. Average Daily Revenue
SELECT
    (ROW_NUMBER() OVER()) as id, 
    strftime('%Y-%m-%d', date) as day,
    deal,
    SUM(CASE WHEN amount > 0 AND (type = 'revenue' OR type = '') THEN amount ELSE 0 END) as dailyRevenue
FROM
    transactions
GROUP BY
    strftime('%Y-%m-%d', date), deal;

-- 3b. Average Weekly Revenue
SELECT
    (ROW_NUMBER() OVER()) as id,
    strftime('%Y-%W', date) as week,
    deal,
    AVG(dailyRevenue) as averageWeeklyRevenue
FROM (
    SELECT
        date,
        deal,
        SUM(CASE WHEN amount > 0 AND (type = 'revenue' OR type = '') THEN amount ELSE 0 END) as dailyRevenue
    FROM
        transactions
    GROUP BY
        strftime('%Y-%m-%d', date), deal
) t
GROUP BY
    week, deal;


-- 3c. Average Monthly Revenue
SELECT
    strftime('%Y-%m', date) || '-' || deal as id, -- Unique ID based on month and deal
    strftime('%Y-%m', date) as month,
    deal,
    AVG(dailyRevenue) as averageMonthlyRevenue
FROM (
    SELECT
        date,
        deal,
        SUM(CASE WHEN amount > 0 AND (type = 'revenue' OR type = '') THEN amount ELSE 0 END) as dailyRevenue
    FROM
        transactions
    GROUP BY
        strftime('%Y-%m-%d', date), deal
)
GROUP BY
    strftime('%Y-%m', date), deal;


-- =================================================================================
-- 4. First Financing Payment Date
-- Logic: To find the start of financing activities for a deal, we look at all
-- transactions marked as 'financing' and find the earliest (minimum) date.
-- =================================================================================
SELECT
    deal as id,
    deal,
    MIN(date) as firstFinancingDate
FROM
    transactions
WHERE
    type = 'financing'
GROUP BY
    deal;


-- =================================================================================
-- 5. Total Financing Amount
-- Logic: This view provides a simple sum of all money received from financing
-- for each deal. We filter transactions for the 'financing' type and sum their amounts.
-- =================================================================================
SELECT
    deal as id,
    deal,
    SUM(ABS(amount)) as totalFinancingAmount
FROM
    transactions
WHERE
    type = 'financing'
GROUP BY
    deal;


-- =================================================================================
-- 6. Total Bank Fees
-- Logic: We sum up all bank-related fees from the statement details. This includes
-- service charges, overdraft fees, and returned item fees for each deal.
-- We link statements to deals by looking at the transactions within them.
-- =================================================================================
SELECT
    t.deal as id,
    t.deal,
    SUM(sd.service_charge) as totalServiceCharges,
    SUM(sd.total_overdraft_fee) as totalOverdraftFees,
    SUM(sd.total_returned_item_fees) as totalReturnedItemFees,
    (SUM(sd.service_charge) + SUM(sd.total_overdraft_fee) + SUM(sd.total_returned_item_fees)) as totalBankFees
FROM
    statement_details sd
JOIN (SELECT DISTINCT deal, statement FROM transactions) t ON sd.statement = t.statement
GROUP BY
    t.deal;


-- =================================================================================
-- 7. Financing Payment Frequency
-- Logic: To understand how often financing payments are made, we count the number
-- of financing transactions that occur each month for a given deal.
-- =================================================================================
SELECT
    strftime('%Y-%m', date) || '-' || deal,
    strftime('%Y-%m', date) as month,
    deal,
    COUNT(id) as financingPaymentsCount
FROM
    transactions
WHERE
    type = 'financing'
GROUP BY
    month, deal;


-- =================================================================================
-- 8. Monthly Financing as Percentage of Monthly Income
-- Logic: This view shows the relationship between financing and revenue on a
-- monthly basis. For each month and deal, we divide the total financing amount
-- by the total revenue/deposits and multiply by 100.
-- =================================================================================
SELECT
    strftime('%Y-%m', date) || '-' || deal as id,
    strftime('%Y-%m', date) as month,
    deal,
    (SUM(CASE WHEN type = 'financing' THEN ABS(amount) ELSE 0 END) * 100.0 /
    NULLIF(SUM(CASE WHEN amount > 0 AND (type = 'revenue' OR type = '') THEN amount ELSE 0 END), 0)
    ) as monthlyFinancingAsPercentageOfIncome
FROM
    transactions
GROUP BY
    month, deal;


-- =================================================================================
-- 9. Beginning Balance Over Time
-- Logic: This time series shows the starting balance for each statement period,
-- allowing you to track the financial position at the beginning of each cycle.
-- We link the balance to a deal via the transactions table.
-- =================================================================================
SELECT
    sd.id as id,
    sd.date,
    t.deal,
    sd.beginning_balance
FROM
    statement_details sd
JOIN (SELECT DISTINCT deal, statement FROM transactions) t ON sd.statement = t.statement
ORDER BY
    t.deal, sd.date;


-- =================================================================================
-- 10. Checks vs. Debits Over Time
-- Logic: This view compares the total value of paid checks against the total
-- value of all debits (which includes checks) for each statement period. This helps
-- identify the proportion of debits that are from checks.
-- =================================================================================
SELECT
    sd.id as id,
    sd.date,
    t.deal,
    sd.statement,
    sd.total_checks_debits,
    IFNULL(cp.total_checks_amount, 0) as totalChecksAmount
FROM
    statement_details sd
JOIN
    (SELECT DISTINCT deal, statement FROM transactions) t ON sd.statement = t.statement
LEFT JOIN
    (SELECT statement, SUM(amount) as total_checks_amount FROM checks_paid GROUP BY statement) cp ON sd.statement = cp.statement
ORDER BY
    t.deal, sd.date;


-- =================================================================================
-- 11. Total Interest Paid Each Month
-- Logic: This provides a monthly summary of interest paid, calculated by summing
-- the 'interest_paid' field from all statements within a given month.
-- =================================================================================
SELECT
    strftime('%Y-%m', date) as id,
    strftime('%Y-%m', date) as month,
    SUM(interest_paid) as totalInterestPaid
FROM
    statement_details
GROUP BY
    strftime('%Y-%m', date);


-- =================================================================================
-- 12. Ending Balance Over Time
-- Logic: Similar to the beginning balance, this time series shows the closing
-- balance for each statement period, allowing you to track financial position
-- at the end of each cycle.
-- =================================================================================
SELECT
    sd.id as id,
    sd.date,
    t.deal,
    sd.ending_balance
FROM
    statement_details sd
JOIN (SELECT DISTINCT deal, statement FROM transactions) t ON sd.statement = t.statement
ORDER BY
    t.deal, sd.date;
